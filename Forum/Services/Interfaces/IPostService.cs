using Forum.Dtos.Common;
using Forum.Dtos.Posts;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;
using System.Threading.Tasks;
// Тип элемента - Интерфейс Сервиса 
// Назначение типа: Интерфейсы определяют набор методов, которые должен реализовать класс сервиса.
//  Назначение элемента - Интерфейс Сервиса Записей 
// Определяет основные операции CRUD (Create, Read, Update, Delete) для записей,
// а также получение списков записей с пагинацией и поиском.
namespace Forum.Services.Interfaces
{
    public interface IPostService
    {
        //  Метод - GetPostsAsync 
        // Назначение - Определяет метод для получения списка записей с пагинацией и поиском.
        // Что делает - Реализация получит из БД страницу записей, отсортированных по дате,
        // опционально отфильтрованных по строке поиска (в заголовке или содержании), и вернет их в виде PostDto.
        // Параметры -
        // pageNumber - номер запрашиваемой страницы (начиная с 1).
        // pageSize - количество записей на странице.
        // searchTerm - строка для поиска (может быть null или пустой).
        // Возвращает - Task<PagedResult<PostDto>> - Асинхронная операция, возвращающая объект с результатами пагинации (список записей, общее количество и т.д.).

        //  Метод - GetPostByIdAsync 
        // Назначение - Определяет метод для получения детальной информации об одной записи по ее ID.
        // Что делает - Реализация найдет запись в БД по ID и вернет ее полные данные (включая содержание и автора) в виде PostDetailsDto.
        // Параметры - postId - ID запрашиваемой записи.
        // Возвращает - Task<ActionResult<PostDetailsDto>> - Асинхронная операция. Вернет Ok с PostDetailsDto в случае успеха, или NotFound, если запись не найдена.

        //  Метод - CreatePostAsync 
        // Назначение - Определяет метод для создания новой записи.
        // Что делает - Реализация создаст новую запись в БД с данными из DTO,
        // установив текущего пользователя (из ClaimsPrincipal) как автора и текущую дату как дату создания.
        // Параметры -
        // createPostDto - объект с данными для новой записи (заголовок, содержание).
        // userPrincipal - информация о текущем аутентифицированном пользователе (для определения автора).
        // Возвращает - Task<ActionResult<PostDetailsDto>> - Асинхронная операция. Вернет CreatedAtAction с созданным PostDetailsDto в случае успеха, или ошибку (например, Unauthorized).

        //  Метод - UpdatePostAsync 
        // Назначение - Определяет метод для обновления существующей записи.
        // Что делает - Реализация найдет запись по ID, проверит, имеет ли текущий пользователь право ее редактировать (он автор или администратор),
        // обновит заголовок и содержание записи данными из DTO и сохранит изменения в БД.
        // Параметры -
        // postId - ID обновляемой записи.
        // updatePostDto - объект с новыми данными для записи (заголовок, содержание).
        // userPrincipal - информация о текущем пользователе для проверки прав доступа.
        // Возвращает - Task<IActionResult> - Асинхронная операция. Вернет NoContent в случае успеха, NotFound если запись не найдена, или Forbid если нет прав доступа.

        //  Метод - DeletePostAsync 
        // Назначение - Определяет метод для удаления записи (перемещения в "удаленные").
        // Что делает - Реализация найдет запись по ID, проверит права на удаление (автор или админ),
        // переместит запись и все связанные с ней комментарии в таблицы "Удаленная_запись" и "Удаленный_комментарий" в рамках транзакции,
        // а затем удалит оригинальную запись и комментарии из активных таблиц.
        // Параметры -
        // postId - ID удаляемой записи.
        // userPrincipal - информация о текущем пользователе для проверки прав доступа.
        // Возвращает - Task<IActionResult> - Асинхронная операция. Вернет Ok с сообщением или NoContent в случае успеха, NotFound, Forbid, или StatusCode 500 в случае ошибки транзакции.

        //  Метод - GetMyPostsAsync 
        // Назначение - Определяет метод для получения списка записей, созданных текущим пользователем, с пагинацией и поиском.
        // Что делает - Реализация получит из БД страницу записей, отфильтрованных по ID текущего пользователя (из ClaimsPrincipal),
        // отсортированных по дате, опционально отфильтрованных по строке поиска, и вернет их в виде PostDto.
        // Параметры -
        // pageNumber - номер запрашиваемой страницы.
        // pageSize - количество записей на странице.
        // searchTerm - строка для поиска.
        // userPrincipal - информация о текущем пользователе для фильтрации.
        // Возвращает - Task<PagedResult<PostDto>> - Асинхронная операция, возвращающая объект с результатами пагинации для записей текущего пользователя.

        Task<PagedResult<PostDto>> GetPostsAsync(int pageNumber, int pageSize, string searchTerm);
        Task<ActionResult<PostDetailsDto>> GetPostByIdAsync(int postId);
        Task<ActionResult<PostDetailsDto>> CreatePostAsync(CreatePostDto createPostDto, ClaimsPrincipal userPrincipal);
        Task<IActionResult> UpdatePostAsync(int postId, UpdatePostDto updatePostDto, ClaimsPrincipal userPrincipal);
        Task<IActionResult> DeletePostAsync(int postId, ClaimsPrincipal userPrincipal);
        Task<PagedResult<PostDto>> GetMyPostsAsync(int pageNumber, int pageSize, string searchTerm, ClaimsPrincipal userPrincipal);
    }
}
